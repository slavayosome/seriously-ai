---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating a Design Specification Document (DSD)

## Goal  
To guide an AI assistant in creating a detailed Design Specification Document (DSD) in Markdown format. The DSD should capture the visual language, interaction patterns, component definitions, and screen states required to translate product requirements into a cohesive user experience.

## Process  
1. **Reference Product & System Specs:** The user provides the Product Specification Document (PSD) and System Specification Document (SSD) for context.  
2. **Ask Clarifying Questions:** Before writing the DSD, the AI *must* ask clarifying questions to confirm brand guidelines, accessibility targets, and design priorities.  
3. **Generate DSD:** Use the inputs and answers to clarifying questions to create a structured design spec using the format below.  
4. **Save DSD:** Save the document as `dsd-[product-name].md` inside the `/specs` directory.

## Clarifying Questions (Examples)  
The AI should tailor questions to the project, but here are common prompts:

* **Brand Voice:** "How should the product feel visually and tonally?"  
* **Accessibility Level:** "What WCAG compliance level are we targeting?"  
* **Primary Platform:** "Is the initial design focus web, mobile, or both?"  
* **Design System:** "Do we start a new design system or extend an existing one?"  
* **Core Components:** "Which UI components are mission-critical for the MVP?"  
* **Interaction Depth:** "Are micro-interactions and animations required from day one?"  
* **Screen Inventory:** "What key screens or flows must be documented?"  
* **Responsiveness:** "What breakpoints or device classes must be supported?"  
* **Hand-off Format:** "Will developers consume Figma, code snippets, or both?"  

## DSD Structure  

1. **Design Principles**  
   - Brand personality, design philosophy, and accessibility standards.  

2. **Design System Foundations**  
   - **Color Palette:** Primary, secondary, semantic, and neutrals.  
   - **Typography:** Font stacks, type scale, and weight definitions.  
   - **Spacing & Sizing:** Base unit, spacing scale, and grid column setup.  

3. **Component Specifications**  
   - For each component include **Purpose**, **Anatomy**, **Variants**, **States** (default, hover, active, focus, disabled, loading, error), **Behavior**, and **Accessibility** guidelines.  

4. **Layout Patterns**  
   - Grid system, breakpoints, container widths, and common page layouts (e.g., header-sidebar-content).  

5. **Interaction Patterns**  
   - Transition timing/easing, feedback micro-interactions, loading indicators, and error-handling visuals.  

6. **Screen Specifications**  
   - For each key screen document **Default**, **Loading**, **Empty**, **Error**, and **Success** states with notes on data, actions, and transitions.  

## Target Audience  
Assume the primary reader of the DSD is a **UI engineer, UX designer, or frontend developer**. Write with clear terminology, include reusable tokens, and specify interaction details sufficient for implementation without further clarification.

## Output  
* **Format:** Markdown (`.md`)  
* **Location:** `/specs/`  
* **Filename:** `dsd-[product-name].md`

## Final Instructions  
1. Do NOT start generating the DSD immediately.  
2. Ask clarifying questions in the single-line prompt style shown above.  
3. Use the user's answers to produce a comprehensive, structured DSD ready for design-to-development hand-off.  